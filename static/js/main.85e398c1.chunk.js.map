{"version":3,"sources":["components/ToDoList.js","components/ToDoCreate.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createTask","bind","assertThisInitialized","item","i","_this2","cls","checked","react_default","a","createElement","key","className","onClick","onChecked","text","onDelete","listsItems","entries","map","Component","Create","handleDelete","listsIndex","lists","toConsumableArray","state","splice","setState","handleChecked","selected","handleAdd","e","target","value","newObj","prevState","concat","preventDefault","ToDoList","ref","type","placeholder","App","ToDoCreate","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85e398c1.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass TodoList extends Component {\n  constructor(props) {\n      super(props);\n\n      this.createTask = this.createTask.bind(this);\n  }\n\n  createTask(item, i) {\n      const cls = item.checked ? \"color1\"  : \"color2\"\n      return (\n          <div key={i}>\n              <div className=\"list__container\">\n                  <div className=\"radio__button\">\n                      <div\n                        onClick={() => {this.props.onChecked(i)}}\n                        className={cls}>\n                      </div>\n                  </div>  \n                  <div className=\"list__container--item\">{item.text}</div>\n                  <div\n                    onClick={() => this.props.onDelete(i)}\n                    className=\"delete__icon\">\n                    <div className=\"bar-1\"></div>\n                    <div className=\"bar-2\"></div>\n                  </div>\n              </div>\n          </div>\n      );\n  }\n\n  render() {\n      let newEntries = this.props.entries;\n      let listsItems = newEntries.map(this.createTask);\n      return(\n          <div>\n            {listsItems}\n          </div>\n      );\n  }\n}\n\nexport default TodoList\n\n\n\n\n","import React, {Component} from 'react';\nimport ToDoList from \"./ToDoList\"\n\nclass Create extends Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n          lists: []\n      }\n      \n      this.handleAdd = this.handleAdd.bind(this);\n  }\n\n  handleAdd(e) {\n      if(this.target.value !== \"\") {\n          let newObj = {\n              text: this.target.value,\n          };\n          this.setState(prevState => {\n              return {\n                  lists: prevState.lists.concat(newObj)\n              };\n          });\n      }\n      this.target.value = \"\";\n      e.preventDefault();\n  }\n\n  handleDelete = (listsIndex) => {\n      const lists = [...this.state.lists];\n      lists.splice(listsIndex, 1);\n      this.setState({lists:lists});\n  }\n\n  handleChecked = (selected) => {\n      const lists = [...this.state.lists];\n      let checked;\n      checked = lists[selected].checked;\n      lists[selected].checked = !checked;\n      this.setState({lists});\n  }\n\n    render() {\n      return(\n          <form className=\"container\">\n              <nav className=\"navbar\">\n                  <h6 className=\"headline\">To do list</h6>\n              </nav>\n              <div className=\"list-background\">\n                  <ToDoList\n                    entries={this.state.lists}\n                    onDelete={this.handleDelete}\n                    onChecked={this.handleChecked}\n                  />\n              </div>\n              <div className=\"text-field__container\">\n                  <input\n                    ref={a => this.target = a} \n                    type=\"text\" className=\"text-field\"\n                    placeholder=\"Enter task\">\n                  </input>\n                  <button\n                      onClick={this.handleAdd}\n                      className=\"add__button\">\n                    <span>\n                      Add\n                    </span>\n                  </button>\n              </div>\n          </form>\n      );\n  }\n}\n\nexport default Create;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport ToDoCreate from './components/ToDoCreate';\n\nclass App extends Component {\n  render() {\n    return (\n      <ToDoCreate/>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}